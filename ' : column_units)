Help on class Table in module astropy.table.table:

class TTaabbllee(__builtin__.object)
 |  A class to represent tables of heterogeneous data.
 |  
 |  `Table` provides a class for heterogeneous tabular data, making use of a
 |  `numpy` structured array internally to store the data values.  A key
 |  enhancement provided by the `Table` class is the ability to easily modify
 |  the structure of the table by adding or removing columns, or adding new
 |  rows of data.  In addition table and column metadata are fully supported.
 |  
 |  `Table` differs from `NDData` by the assumption that the input data
 |  consists of columns of homogeneous data, where each column has a unique
 |  identifier and may contain additional metadata such as the data
 |  units, format, and description.
 |  
 |  Parameters
 |  ----------
 |  data : numpy ndarray, dict, list, or Table, optional
 |      Data to initialize table.
 |  names : list, optional
 |      Specify column names
 |  dtypes : list, optional
 |      Specify column data types
 |  meta : dict, optional
 |      Metadata associated with the table
 |  copy : boolean, optional
 |      Copy the input data (default=True).
 |  
 |  Methods defined here:
 |  
 |  ____aarrrraayy____(self, dtype=None)
 |      Support converting Table to np.array via np.array(table).
 |      
 |      Coercion to a different dtype via np.array(table, dtype) is not
 |      supported and will raise a ValueError.
 |  
 |  ____ddeelliitteemm____(self, item)
 |  
 |  ____ggeettiitteemm____(self, item)
 |  
 |  ____iinniitt____(self, data=None, names=None, dtypes=None, meta=None, copy=True)
 |  
 |  ____iitteerr____(self)
 |  
 |  ____lleenn____(self)
 |  
 |  ____nneexxtt____(self)
 |      Python 3 iterator
 |  
 |  ____rreepprr____(self)
 |  
 |  ____sseettiitteemm____(self, item, value)
 |  
 |  ____ssttrr____(self)
 |  
 |  aadddd__ccoolluummnn(self, col, index=None)
 |      Add a new Column object ``col`` to the table.  If ``index``
 |      is supplied then insert column before ``index`` position
 |      in the list of columns, otherwise append column to the end
 |      of the list.
 |      
 |      Parameters
 |      ----------
 |      col : Column
 |          Column object to add.
 |      index : int or None
 |          Insert column before this position or at end (default)
 |  
 |  aadddd__ccoolluummnnss(self, cols, indexes=None)
 |      Add a list of new Column objects ``cols`` to the table.  If a
 |      corresponding list of ``indexes`` is supplied then insert column before
 |      each ``index`` position in the *original* list of columns, otherwise
 |      append columns to the end of the list.
 |      
 |      Parameters
 |      ----------
 |      cols : list of Columns
 |          Column objects to add.
 |      indexes : list of ints or None
 |          Insert column before this position or at end (default)
 |  
 |  aadddd__rrooww(self, vals=None)
 |      Add a new row to the end of the table.
 |      
 |      The ``vals`` argument can be:
 |      
 |      sequence (e.g. tuple or list)
 |          Column values in the same order as table columns.
 |      mapping (e.g. dict)
 |          Keys corresponding to column names.  Missing values will be
 |          filled with np.zeros for the column dtype.
 |      None
 |          All values filled with np.zeros for the column dtype.
 |      
 |      This method requires that the Table object "owns" the underlying array
 |      data.  In particular one cannot add a row to a Table that was
 |      initialized with copy=False from an existing array.
 |      
 |      Parameters
 |      ----------
 |      vals : tuple, list, dict or None
 |          Use the specified values in the new row
 |  
 |  ffiieelldd(self, item)
 |      Return column[item] for recarray compatibility.
 |  
 |  iinnddeexx__ccoolluummnn(self, name)
 |      Return the positional index of column ``name``.
 |      
 |      Parameters
 |      ----------
 |      name : str
 |          column name
 |      
 |      Returns
 |      -------
 |      index : int
 |          Positional index of column ``name``.
 |  
 |  kkeeeepp__ccoolluummnnss(self, names)
 |      Keep only the columns specified (remove the others)
 |      
 |      Parameters
 |      ----------
 |      names : list
 |          A list containing the names of the columns to keep. All other
 |          columns will be removed.
 |  
 |  kkeeyyss(self)
 |  
 |  mmoorree(self, max_lines=None, max_width=None, show_name=True, show_units=False)
 |      Interactively browse table with a paging interface.
 |      
 |      Supported keys::
 |      
 |        f, <space> : forward one page
 |        b : back one page
 |        r : refresh same page
 |        n : next row
 |        p : previous row
 |        < : go to beginning
 |        > : go to end
 |        q : quit browsing
 |        h : print this help
 |      
 |      Parameters
 |      ----------
 |      max_lines : int
 |          Maximum number of lines in table output
 |      
 |      max_width : int or None
 |          Maximum character width of output
 |      
 |      show_name : bool
 |          Include a header row for column names (default=True)
 |      
 |      show_units : bool
 |          Include a header row for units (default=False)
 |  
 |  nneexxtt = __next__(self)
 |  
 |  ppffoorrmmaatt(self, max_lines=None, max_width=None, show_name=True, show_units=False)
 |      Return a list of lines for the formatted string representation of
 |      the table.
 |      
 |      If no value of ``max_lines`` is supplied then the height of the screen
 |      terminal is used to set ``max_lines``.  If the terminal height cannot
 |      be determined then a default of ``astropy.table.pprint.MAX_LINES`` is
 |      used.  If a negative value of ``max_lines`` is supplied then there is
 |      no line limit applied.
 |      
 |      The Same applies for max_width except the default is
 |      ``astropy.table.pprint.MAX_WIDTH``.
 |      
 |      Parameters
 |      ----------
 |      max_lines : int or None
 |          Maximum number of rows to output
 |      
 |      max_width : int or None
 |          Maximum character width of output
 |      
 |      show_name : bool
 |          Include a header row for column names (default=True)
 |      
 |      show_units : bool
 |          Include a header row for units (default=False)
 |      
 |      Returns
 |      -------
 |      lines : list
 |          Formatted table as a list of strings
 |  
 |  pppprriinntt(self, max_lines=None, max_width=None, show_name=True, show_units=False)
 |      Print a formatted string representation of the table.
 |      
 |      If no value of ``max_lines`` is supplied then the height of the screen
 |      terminal is used to set ``max_lines``.  If the terminal height cannot
 |      be determined then a default of ``astropy.table.pprint.MAX_LINES`` is
 |      used.  If a negative value of ``max_lines`` is supplied then there is
 |      no line limit applied.
 |      
 |      The Same applies for max_width except the default is
 |      ``astropy.table.pprint.MAX_WIDTH``.
 |      
 |      Parameters
 |      ----------
 |      max_lines : int
 |          Maximum number of lines in table output
 |      
 |      max_width : int or None
 |          Maximum character width of output
 |      
 |      show_name : bool
 |          Include a header row for column names (default=True)
 |      
 |      show_units : bool
 |          Include a header row for units (default=False)
 |  
 |  rreemmoovvee__ccoolluummnn(self, name)
 |      Remove a column from the table.
 |      
 |      This can also be done with::
 |      
 |        del table[name]
 |      
 |      Parameters
 |      ----------
 |      name : str
 |          Name of column to remove
 |  
 |  rreemmoovvee__ccoolluummnnss(self, names)
 |      Remove several columns from the table
 |      
 |      Parameters
 |      ----------
 |      names : list
 |          A list containing the names of the columns to remove
 |  
 |  rreennaammee__ccoolluummnn(self, name, new_name)
 |      Rename a column.
 |      
 |      This can also be done directly with by setting the ``name`` attribute
 |      for a column::
 |      
 |        table[name].name = new_name
 |      
 |      Parameters
 |      ----------
 |      name : str
 |          The current name of the column.
 |      new_name : str
 |          The new name for the column
 |  
 |  rreevveerrssee(self)
 |      Reverse the row order of table rows.  The table is reversed
 |      in place and there are no function arguments.
 |  
 |  ssoorrtt(self, keys)
 |      Sort the table according to one or more keys. This operates
 |      on the existing table and does not return a new table.
 |      
 |      Parameters
 |      ----------
 |      keys : str or list of str
 |          The key(s) to order the table by
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  ____ddiicctt____
 |      dictionary for instance variables (if defined)
 |  
 |  ____wweeaakkrreeff____
 |      list of weak references to the object (if defined)
 |  
 |  ccoollnnaammeess
 |  
 |  ddttyyppee
